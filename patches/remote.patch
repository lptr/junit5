diff --git a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java
index 1e81ad9..b96e965 100644
--- a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java
+++ b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java
@@ -45,7 +45,8 @@ public final class TestIdentifier implements Serializable {
 	private final String legacyReportingName;
 	private final TestSource source;
 	private final Set<TestTag> tags;
-	private final TestDescriptor.Type type;
+	private final boolean test;
+	private final boolean container;
 
 	/**
 	 * Factory for creating a new {@link TestIdentifier} from a {@link TestDescriptor}.
@@ -55,24 +56,25 @@ public final class TestIdentifier implements Serializable {
 		Preconditions.notNull(testDescriptor, "TestDescriptor must not be null");
 		String uniqueId = testDescriptor.getUniqueId().toString();
 		String displayName = testDescriptor.getDisplayName();
-		TestSource source = testDescriptor.getSource().orElse(null);
+		Optional<TestSource> source = testDescriptor.getSource();
 		Set<TestTag> tags = testDescriptor.getTags();
-		TestDescriptor.Type type = testDescriptor.getType();
-		String parentId = testDescriptor.getParent().map(
-			parentDescriptor -> parentDescriptor.getUniqueId().toString()).orElse(null);
+		boolean test = testDescriptor.isTest();
+		boolean container = testDescriptor.isContainer();
+		Optional<String> parentId = testDescriptor.getParent().map(
+			parentDescriptor -> parentDescriptor.getUniqueId().toString());
 		String legacyReportingName = testDescriptor.getLegacyReportingName();
-		return new TestIdentifier(uniqueId, displayName, source, tags, type, parentId, legacyReportingName);
+		return new TestIdentifier(uniqueId, displayName, source, tags, test, container, parentId, legacyReportingName);
 	}
 
-	TestIdentifier(String uniqueId, String displayName, TestSource source, Set<TestTag> tags, TestDescriptor.Type type,
-			String parentId, String legacyReportingName) {
-		Preconditions.notNull(type, "TestDescriptor.Type must not be null");
+	TestIdentifier(String uniqueId, String displayName, Optional<TestSource> source, Set<TestTag> tags, boolean test,
+			boolean container, Optional<String> parentId, String legacyReportingName) {
 		this.uniqueId = uniqueId;
-		this.parentId = parentId;
+		this.parentId = parentId.orElse(null);
 		this.displayName = displayName;
-		this.source = source;
+		this.source = source.orElse(null);
 		this.tags = unmodifiableSet(new LinkedHashSet<>(tags));
-		this.type = type;
+		this.test = test;
+		this.container = container;
 		this.legacyReportingName = legacyReportingName;
 	}
 
@@ -135,34 +137,17 @@ public final class TestIdentifier implements Serializable {
 	}
 
 	/**
-	 * Get the underlying descriptor type.
-	 *
-	 * @return the underlying descriptor type; never {@code null}
-	 */
-	public TestDescriptor.Type getType() {
-		return type;
-	}
-
-	/**
 	 * Determine if this identifier represents a test.
-	 *
-	 * @return {@code true} if the underlying descriptor type represents a test,
-	 * {@code false} otherwise
-	 * @see TestDescriptor.Type#isTest()
 	 */
 	public boolean isTest() {
-		return getType().isTest();
+		return this.test;
 	}
 
 	/**
 	 * Determine if this identifier represents a container.
-	 *
-	 * @return {@code true} if the underlying descriptor type represents a container,
-	 * {@code false} otherwise
-	 * @see TestDescriptor.Type#isContainer()
 	 */
 	public boolean isContainer() {
-		return getType().isContainer();
+		return this.container;
 	}
 
 	/**
@@ -209,7 +194,8 @@ public final class TestIdentifier implements Serializable {
 				.append("legacyReportingName", this.legacyReportingName)
 				.append("source", this.source)
 				.append("tags", this.tags)
-				.append("type", this.type)
+				.append("test", this.test)
+				.append("container", this.container)
 				.toString();
 		// @formatter:on
 	}
diff --git a/junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/RunListenerAdapterTests.java b/junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/RunListenerAdapterTests.java
index 85f0eb3..be2df03 100644
--- a/junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/RunListenerAdapterTests.java
+++ b/junit-platform-surefire-provider/src/test/java/org/junit/platform/surefire/provider/RunListenerAdapterTests.java
@@ -222,13 +222,12 @@ class RunListenerAdapterTests {
 		when(parent.getUniqueId()).thenReturn(newId());
 		when(parent.getDisplayName()).thenReturn(parentDisplay);
 		when(parent.getLegacyReportingName()).thenReturn(parentDisplay);
-		when(parent.getType()).thenReturn(TestDescriptor.Type.CONTAINER);
 		TestIdentifier parentId = TestIdentifier.from(parent);
 
 		// The (child) test case that is to be executed as part of a test plan.
 		TestDescriptor child = mock(TestDescriptor.class);
 		when(child.getUniqueId()).thenReturn(newId());
-		when(child.getType()).thenReturn(TestDescriptor.Type.TEST);
+		when(child.isTest()).thenReturn(true);
 
 		// Ensure the child source is null yet that there is a parent -- the special case to be tested.
 		when(child.getSource()).thenReturn(Optional.empty());
diff --git a/platform-tests/src/test/java/org/junit/platform/launcher/TestIdentifierTests.java b/platform-tests/src/test/java/org/junit/platform/launcher/TestIdentifierTests.java
index 003f4ff..94c00cc 100644
--- a/platform-tests/src/test/java/org/junit/platform/launcher/TestIdentifierTests.java
+++ b/platform-tests/src/test/java/org/junit/platform/launcher/TestIdentifierTests.java
@@ -17,6 +17,8 @@ import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.platform.commons.util.SerializationUtils.serializeAndDeserialize;
 
+import java.util.Optional;
+
 import org.junit.jupiter.api.Test;
 import org.junit.platform.engine.TestDescriptor;
 import org.junit.platform.engine.TestTag;
@@ -39,32 +41,16 @@ class TestIdentifierTests {
 	}
 
 	@Test
-	void inheritsTypeFromDescriptor() {
-		TestDescriptor descriptor = new TestDescriptorStub(UniqueId.root("aType", "uniqueId"), "displayName");
-		TestIdentifier identifier = TestIdentifier.from(descriptor);
-		assertEquals(TestDescriptor.Type.TEST, identifier.getType());
-		assertTrue(identifier.isTest());
-		assertFalse(identifier.isContainer());
-
-		descriptor.addChild(new TestDescriptorStub(UniqueId.root("aChild", "uniqueId"), "displayName"));
-		identifier = TestIdentifier.from(descriptor);
-		assertEquals(TestDescriptor.Type.CONTAINER, identifier.getType());
-		assertFalse(identifier.isTest());
-		assertTrue(identifier.isContainer());
-	}
-
-	@Test
 	void serialization() throws Exception {
 		TestIdentifier identifier = serializeAndDeserialize(//
-			new TestIdentifier("uniqueId", "displayName", new ClassSource(TestIdentifierTests.class),
-				singleton(TestTag.create("aTag")), TestDescriptor.Type.TEST, "parentId", "reportingName"));
+			new TestIdentifier("uniqueId", "displayName", Optional.of(new ClassSource(TestIdentifierTests.class)),
+				singleton(TestTag.create("aTag")), true, false, Optional.of("parentId"), "reportingName"));
 
 		assertEquals("uniqueId", identifier.getUniqueId());
 		assertEquals("displayName", identifier.getDisplayName());
 		assertEquals("reportingName", identifier.getLegacyReportingName());
 		assertThat(identifier.getSource()).contains(new ClassSource(TestIdentifierTests.class));
 		assertEquals(singleton(TestTag.create("aTag")), identifier.getTags());
-		assertEquals(TestDescriptor.Type.TEST, identifier.getType());
 		assertTrue(identifier.isTest());
 		assertFalse(identifier.isContainer());
 		assertThat(identifier.getParentId()).contains("parentId");
